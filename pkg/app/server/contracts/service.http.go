// Code generated by protoc-gen-gohttp. DO NOT EDIT.
// source: proto/gosearch/contracts/service.proto

package contracts

import (
	context "context"
	contracts "github.com/BetaLixT/gosearch/pkg/domain/contracts"
	gorr "github.com/betalixt/gorr"
	gin "github.com/gin-gonic/gin"
	protojson "google.golang.org/protobuf/encoding/protojson"
	ioutil "io/ioutil"
)

const InternalContextKey = "inCxt"

var protomarsh = protojson.MarshalOptions{EmitUnpopulated: true}

func newMissingRequiredParametersError(parameter string) *gorr.Error {
	return gorr.NewError(
		gorr.ErrorCode{
			Code:    400,
			Message: "MissingRequiredParametersError",
		},
		400,
		"missing field(s): "+parameter,
	)
}

func newUnparsableParameterError(parameter string) *gorr.Error {
	return gorr.NewError(
		gorr.ErrorCode{
			Code:    400,
			Message: "UnparsableParametersError",
		},
		400,
		"failed to parsed or missing field(s): "+parameter,
	)
}

// Documents
type DocumentsHTTPServer interface {
	// Query for existing tasks
	Create(context.Context, *contracts.CreateIndexedDocumentCommand) (*contracts.DocumentCreatedResponse, error)
	Query(context.Context, *contracts.SearchQuery) (*contracts.SearchResponse, error)
}
type documents struct {
	app DocumentsHTTPServer
}

// creates and indexes a new document
func (p *documents) create(ctx *gin.Context) {
	body := contracts.CreateIndexedDocumentCommand{}
	raw, err := ioutil.ReadAll(ctx.Request.Body)
	if err != nil {
		ctx.Error(err)
		return
	}
	protojson.Unmarshal(raw, &body)
	var c context.Context
	if v, ok := ctx.Get(InternalContextKey); ok {
		c, _ = v.(context.Context)
	}
	if c == nil {
		c = ctx
	}
	res, err := p.app.Create(
		c,
		&body,
	)
	if err != nil {
		ctx.Error(err)
		return
	}
	resraw, err := protomarsh.Marshal(res)
	if err != nil {
		ctx.Error(err)
		return
	}
	ctx.Status(200)
	ctx.Header("Content-Type", "application/json")
	_, err = ctx.Writer.Write(resraw)
	if err != nil {
		ctx.Error(err)
		return
	}
}

// searches document with provided search query
func (p *documents) query(ctx *gin.Context) {
	body := contracts.SearchQuery{}
	if val, ok := ctx.GetQuery("query"); ok {
		body.Query = val
	} else {
		ctx.Error(newMissingRequiredParametersError("query"))
		return
	}
	var c context.Context
	if v, ok := ctx.Get(InternalContextKey); ok {
		c, _ = v.(context.Context)
	}
	if c == nil {
		c = ctx
	}
	res, err := p.app.Query(
		c,
		&body,
	)
	if err != nil {
		ctx.Error(err)
		return
	}
	resraw, err := protomarsh.Marshal(res)
	if err != nil {
		ctx.Error(err)
		return
	}
	ctx.Status(200)
	ctx.Header("Content-Type", "application/json")
	_, err = ctx.Writer.Write(resraw)
	if err != nil {
		ctx.Error(err)
		return
	}
}
func RegisterDocumentsHTTPServer(
	grp *gin.RouterGroup,
	srv DocumentsHTTPServer,
) {
	ctrl := documents{app: srv}
	grp.POST("/documents", ctrl.create)
	grp.GET("/documents/search", ctrl.query)
}

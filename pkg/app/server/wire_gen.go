// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/BetaLixT/gosearch/pkg/app/server/handlers"
	"github.com/BetaLixT/gosearch/pkg/domain/usecases"
	"github.com/BetaLixT/gosearch/pkg/impls/base/repos/cntxt"
	"github.com/BetaLixT/gosearch/pkg/impls/base/repos/uids"
	"github.com/BetaLixT/gosearch/pkg/impls/roach"
	"github.com/BetaLixT/gosearch/pkg/impls/roach/repos/base"
	"github.com/BetaLixT/gosearch/pkg/impls/roach/repos/documents"
	"github.com/BetaLixT/gosearch/pkg/impls/roach/repos/indexes"
	"github.com/BetaLixT/gosearch/pkg/infra/config"
	"github.com/BetaLixT/gosearch/pkg/infra/lgr"
	"github.com/BetaLixT/gosearch/pkg/infra/roachdb"
	"github.com/BetaLixT/gosearch/pkg/infra/snowflake"
	"github.com/BetaLixT/gosearch/pkg/infra/trace"
	"github.com/BetaLixT/gosearch/pkg/infra/trace/appinsights"
	"github.com/BetaLixT/gosearch/pkg/infra/trace/jaeger"
	"github.com/BetaLixT/gosearch/pkg/infra/trace/logex"
	"github.com/BetaLixT/gosearch/pkg/infra/trace/promex"
)

// Injectors from wire.go:

// InitializeEvent creates an Event. It will error if the Event is staffed with
// a grumpy greeter.
func initializeAppRoach() (*app, error) {
	loggerFactory, err := lgr.NewLoggerFactory()
	if err != nil {
		return nil, err
	}
	initializer := config.NewInitializer(loggerFactory)
	options := config.NewSnowflakeOptions(initializer)
	node, err := snowflake.NewSnowflake(options)
	if err != nil {
		return nil, err
	}
	uidRepository := uids.NewUIDRepository(node)
	exporterOptions := config.NewAppInsightsExporterOptions(initializer)
	traceExporter, err := appinsights.NewTraceExporter(exporterOptions)
	if err != nil {
		return nil, err
	}
	jaegerExporterOptions := config.NewJaegerExporterOptions(initializer)
	jaegerTraceExporter, err := jaeger.NewJaegerTraceExporter(jaegerExporterOptions)
	if err != nil {
		return nil, err
	}
	logexTraceExporter := logex.New(loggerFactory)
	promexTraceExporter, err := promex.NewTraceExporter()
	if err != nil {
		return nil, err
	}
	exporterList := trace.NewTraceExporterList(traceExporter, jaegerTraceExporter, logexTraceExporter, promexTraceExporter, loggerFactory)
	traceOptions, err := config.NewTraceOptions(initializer)
	if err != nil {
		return nil, err
	}
	tracer, err := trace.NewTracer(exporterList, traceOptions, loggerFactory)
	if err != nil {
		return nil, err
	}
	databaseOptions := config.NewRoachDBOptions(initializer)
	tracedDB, err := roachdb.NewDatabaseContext(tracer, databaseOptions)
	if err != nil {
		return nil, err
	}
	baseDataRepository := base.New(tracedDB, loggerFactory)
	repository := documents.New(baseDataRepository)
	indexesRepository := indexes.New(baseDataRepository)
	useCases := usecases.NewUseCases(loggerFactory, uidRepository, repository, indexesRepository)
	documentsHandler := handlers.NewDocumentsHandler(loggerFactory, useCases)
	implementation := roach.NewImplementation(tracedDB, loggerFactory)
	contextFactory := cntxt.NewContextFactory(loggerFactory)
	serverApp := newApp(documentsHandler, documentsHandler, implementation, loggerFactory, contextFactory, tracer)
	return serverApp, nil
}
